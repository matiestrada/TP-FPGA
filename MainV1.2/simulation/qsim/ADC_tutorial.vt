// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/22/2024 22:03:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    floodfill_para_simular
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module floodfill_para_simular_vlg_sample_tst(
	B,
	d0,
	d1,
	d2,
	d3,
	sampler_tx
);
input [3:0] B;
input [3:0] d0;
input [3:0] d1;
input [3:0] d2;
input [3:0] d3;
output sampler_tx;

reg sample;
time current_time;
always @(B or d0 or d1 or d2 or d3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module floodfill_para_simular_vlg_check_tst (
	Cout,
	pos,
	S,
	sampler_rx
);
input  Cout;
input [1:0] pos;
input [3:0] S;
input sampler_rx;

reg  Cout_expected;
reg [1:0] pos_expected;
reg [3:0] S_expected;

reg  Cout_prev;
reg [1:0] pos_prev;
reg [3:0] S_prev;

reg  Cout_expected_prev;
reg [1:0] pos_expected_prev;
reg [3:0] S_expected_prev;

reg  last_Cout_exp;
reg [1:0] last_pos_exp;
reg [3:0] last_S_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Cout_prev = Cout;
	pos_prev = pos;
	S_prev = S;
end

// update expected /o prevs

always @(trigger)
begin
	Cout_expected_prev = Cout_expected;
	pos_expected_prev = pos_expected;
	S_expected_prev = S_expected;
end



// expected Cout
initial
begin
	Cout_expected = 1'bX;
end 
// expected pos[ 1 ]
initial
begin
	pos_expected[1] = 1'bX;
end 
// expected pos[ 0 ]
initial
begin
	pos_expected[0] = 1'bX;
end 
// expected S[ 3 ]
initial
begin
	S_expected[3] = 1'bX;
end 
// expected S[ 2 ]
initial
begin
	S_expected[2] = 1'bX;
end 
// expected S[ 1 ]
initial
begin
	S_expected[1] = 1'bX;
end 
// expected S[ 0 ]
initial
begin
	S_expected[0] = 1'bX;
end 
// generate trigger
always @(Cout_expected or Cout or pos_expected or pos or S_expected or S)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Cout = %b | expected pos = %b | expected S = %b | ",Cout_expected_prev,pos_expected_prev,S_expected_prev);
	$display("| real Cout = %b | real pos = %b | real S = %b | ",Cout_prev,pos_prev,S_prev);
`endif
	if (
		( Cout_expected_prev !== 1'bx ) && ( Cout_prev !== Cout_expected_prev )
		&& ((Cout_expected_prev !== last_Cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cout_expected_prev);
		$display ("     Real value = %b", Cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cout_exp = Cout_expected_prev;
	end
	if (
		( pos_expected_prev[0] !== 1'bx ) && ( pos_prev[0] !== pos_expected_prev[0] )
		&& ((pos_expected_prev[0] !== last_pos_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pos[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pos_expected_prev);
		$display ("     Real value = %b", pos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pos_exp[0] = pos_expected_prev[0];
	end
	if (
		( pos_expected_prev[1] !== 1'bx ) && ( pos_prev[1] !== pos_expected_prev[1] )
		&& ((pos_expected_prev[1] !== last_pos_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pos[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pos_expected_prev);
		$display ("     Real value = %b", pos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pos_exp[1] = pos_expected_prev[1];
	end
	if (
		( S_expected_prev[0] !== 1'bx ) && ( S_prev[0] !== S_expected_prev[0] )
		&& ((S_expected_prev[0] !== last_S_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[0] = S_expected_prev[0];
	end
	if (
		( S_expected_prev[1] !== 1'bx ) && ( S_prev[1] !== S_expected_prev[1] )
		&& ((S_expected_prev[1] !== last_S_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[1] = S_expected_prev[1];
	end
	if (
		( S_expected_prev[2] !== 1'bx ) && ( S_prev[2] !== S_expected_prev[2] )
		&& ((S_expected_prev[2] !== last_S_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[2] = S_expected_prev[2];
	end
	if (
		( S_expected_prev[3] !== 1'bx ) && ( S_prev[3] !== S_expected_prev[3] )
		&& ((S_expected_prev[3] !== last_S_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[3] = S_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module floodfill_para_simular_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] B;
reg [3:0] d0;
reg [3:0] d1;
reg [3:0] d2;
reg [3:0] d3;
// wires                                               
wire Cout;
wire [1:0] pos;
wire [3:0] S;

wire sampler;                             

// assign statements (if any)                          
floodfill_para_simular i1 (
// port map - connection between master ports and signals/registers   
	.B(B),
	.Cout(Cout),
	.d0(d0),
	.d1(d1),
	.d2(d2),
	.d3(d3),
	.pos(pos),
	.S(S)
);
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 
// d0[ 3 ]
initial
begin
	d0[3] = 1'b0;
end 
// d0[ 2 ]
initial
begin
	d0[2] = 1'b1;
end 
// d0[ 1 ]
initial
begin
	d0[1] = 1'b0;
end 
// d0[ 0 ]
initial
begin
	d0[0] = 1'b0;
end 
// d1[ 3 ]
initial
begin
	d1[3] = 1'b1;
end 
// d1[ 2 ]
initial
begin
	d1[2] = 1'b1;
end 
// d1[ 1 ]
initial
begin
	d1[1] = 1'b1;
end 
// d1[ 0 ]
initial
begin
	d1[0] = 1'b1;
end 
// d2[ 3 ]
initial
begin
	d2[3] = 1'b0;
end 
// d2[ 2 ]
initial
begin
	d2[2] = 1'b0;
end 
// d2[ 1 ]
initial
begin
	d2[1] = 1'b0;
end 
// d2[ 0 ]
initial
begin
	d2[0] = 1'b1;
end 
// d3[ 3 ]
initial
begin
	d3[3] = 1'b1;
end 
// d3[ 2 ]
initial
begin
	d3[2] = 1'b0;
end 
// d3[ 1 ]
initial
begin
	d3[1] = 1'b0;
end 
// d3[ 0 ]
initial
begin
	d3[0] = 1'b0;
end 

floodfill_para_simular_vlg_sample_tst tb_sample (
	.B(B),
	.d0(d0),
	.d1(d1),
	.d2(d2),
	.d3(d3),
	.sampler_tx(sampler)
);

floodfill_para_simular_vlg_check_tst tb_out(
	.Cout(Cout),
	.pos(pos),
	.S(S),
	.sampler_rx(sampler)
);
endmodule

